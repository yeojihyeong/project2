<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.micol.prj.blog.service.BlogMapper">

	<!--<select id="memberSelect" parameterType="co.micol.prj.member.service.MemberVO" 
		resultType="co.micol.prj.member.service.MemberVO"> select * from member where 
		member_id = #{member_id} </select> -->
	<resultMap type="co.micol.prj.blog.service.BlogVO"
		id="BlogVO">
		<result property="book_isbn" column="book_isbn" />
		<result property="review_title" column="review_title" />
		<result property="review_content" column="review_content" />
		<result property="review_date" column="review_date" />
		<result property="review_cnt" column="review_cnt" />
		<result property="review_like" column="review_like" />
		<result property="review_rating" column="review_rating" />

		<association property="bookVO"
			javaType="co.micol.prj.blog.service.BookVO">
			<id property="book_isbn" column="book_isbn" />
			<result property="book_name" column="book_name" />
			<result property="book_picture" column="book_picture" />
			<result property="book_pfile" column="book_pfile" />
			<result property="book_write" column="book_write" />
			<result property="book_publis" column="book_publis" />
		</association>
	</resultMap>

	<!-- 블로그 상세 조회 -->
	<select id="reviewDetailSelect"
		parameterType="co.micol.prj.blog.service.BlogVO" resultMap="BlogVO">
		select
		K.BOOK_NAME, K.BOOK_WRITE, K.BOOK_PUBLIS, K.BOOK_PICTURE,
		K.BOOK_PFILE, B.REVIEW_TITLE, B.REVIEW_CONTENT, B.REVIEW_DATE,
		B.REVIEW_CNT, B.REVIEW_LIKE, B.REVIEW_RATING
		FROM BLOG B
		LEFT JOIN BOOK K
		ON B.BOOK_ISBN =
		K.BOOK_ISBN
		WHERE B.BLOG_ID=#{blog_id}
	</select>

	<insert id="blogInsert" parameterType="co.micol.prj.blog.service.BlogVO">
		INSERT INTO BLOG (BLOG_ID, MEMBER_ID, BOOK_ISBN,
		REVIEW_TITLE, REVIEW_CONTENT, REVIEW_DATE, REVIEW_RATING, REVIEW_CNT)
		VALUES (blog_seq.nextval, #{member_id}, #{book_isbn}, #{review_title},
		#{review_content}, sysdate, #{review_rating}, #{review_cnt})
	</insert>

	<update id="blogUpdate">
		UPDATE BLOG
		SET BOOK_ID = #{book_id}
		review_title =
		#{book_title}
		review_content = #{review_content}
		review_rating =
		#{review_rating}
		WHERE blog_id = #{blog_id}
	</update>

	<delete id="blogDelete">
		DELETE FROM BLOG WHERE blog_id = #{blog_id}
	</delete>

	<!-- 조회수 증가 -->
	<update id="updateReviewCnt">
		UPDATE BLOG
		SET REVIEW_CNT = REVIEW_CNT + 1
		WHERE
		BLOG_ID = #{blog_id}
	</update>

	<!-- 조회수 높운 리뷰 -->
	<select id="likedReview"
		resultType="co.micol.prj.blog.service.BlogVO">
		SELECT *
		FROM
		(SELECT *
		FROM BLOG
		ORDER BY review_cnt DESC
		)
		<![CDATA[WHERE ROWNUM <= 5]]>
	</select>

	<select id="recentReview"
		resultType="co.micol.prj.blog.service.BlogVO">
		SELECT *
		FROM
		(SELECT *
		FROM BLOG
		ORDER BY review_date DESC
		)
		<![CDATA[WHERE ROWNUM <= 5]]>
	</select>

	<!-- 페이징 기능 -->
	<!-- 총 게시글 갯수 출력 -->
	<select id="countReview" parameterType="String" resultType="int">
		SELECT COUNT(*) AS N FROM BLOG WHERE MEMBER_ID = #{member_id}
	</select>

	<!-- 페이징 처리 후 게시글 조회 -->
	<select id="blogSelectList"
		resultType="co.micol.prj.blog.service.BlogVO">
		SELECT * FROM (
		SELECT ROWNUM RN, A.*
		FROM (
		SELECT * FROM
		BLOG WHERE MEMBER_ID = #{member_id}
		) A
		)
		WHERE RN BETWEEN #{start_no}
		AND #{end_no}
	</select>

	<!-- 리뷰 검색(전체) -->
	<select id="reviewSearch" parameterType="co.micol.prj.blog.service.BlogVO" resultMap="BlogVO">
		SELECT K.BOOK_PICTURE, K.BOOK_PFILE, B.REVIEW_TITLE, B.REVIEW_DATE
		FROM BLOG B JOIN BOOK K USING (BOOK_ISBN)
		WHERE REVIEW_TITLE LIKE '%'||#{searchValue}||'%'
	</select>

	<!-- 리뷰 검색(블로그) -->
	<select id="blogReviewSearch" resultType="co.micol.prj.blog.service.BlogVO">
		SELECT K.BOOK_PICTURE, K.BOOK_PFILE,
		B.REVIEW_TITLE, B.REVIEW_DATE
		FROM BLOG B JOIN BOOK K
		USING (BOOK_ISBN)
		WHERE REVIEW_TITLE LIKE '%'||#{searchValue}||'%'
		AND MEMBER_ID=#{member_id}$;
	</select>

	<!-- 댓글 입력 기능 -->

</mapper>